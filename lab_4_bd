Exercitiul 1

a) Toate funcţiile grup, cu excepţia lui COUNT(*), ignoră valorile null.
b) Diferenta dintre clauzele WHERE si HAVING este ca HAVING poate fi folosita cu agregate,
iar WHERE nu.

Exercitiul 2

SELECT MIN(salary) "Minim", MAX(salary) "Maxim",
    SUM(salary) "Suma", ROUND(SUM(salary)/COUNT(salary),1) "Media"
FROM employees;

Exercitiul 3

SELECT job_id, MIN(salary) "Minim", MAX(salary) "Maxim",
    SUM(salary) "Suma", SUM(salary)/COUNT(salary) "Media"
FROM employees
GROUP BY ROLLUP(job_id);

Exercitiul 4

SELECT job_id,COUNT(first_name)
FROM employees
GROUP BY ROLLUP(job_id);

Exercitiul 5

SELECT COUNT(DISTINCT(e.employee_id)) "Nr manageri"
FROM employees e
    JOIN employees em ON e.employee_id = em.manager_id;

Exercitiul 6

SELECT (MAX(salary) - MIN(salary)) "diferenta maxima salariu"
FROM employees;

Exercitiul 7

SELECT DISTINCT(d.department_name) "Nume departament", l.city "Oras",COUNT(e.employee_id) "Nr angajati",
    ROUND(SUM(e.salary)/COUNT(e.salary),2) "Salariu mediu"
FROM employees e
    RIGHT OUTER JOIN departments d ON e.department_id = d.department_id
    JOIN locations l ON d.location_id = l.location_id
GROUP BY (d.department_name, l.city);

Exercitiul 8

SELECT employee_id, last_name, salary
FROM employees 
WHERE salary > 
    (SELECT SUM(salary)/COUNT(salary)
    FROM employees)
ORDER BY salary DESC;

Exercitiul 9

SELECT DISTINCT(m.employee_id) "sef", e.employee_id "angajat",e.salary
FROM employees m
    JOIN employees e ON m.employee_id = e.manager_id
GROUP BY (m.employee_id,e.employee_id, e.salary)
HAVING e.salary = (SELECT MIN(salary) FROM employees WHERE manager_id = m.employee_id)
ORDER BY "sef", salary;

Exercitiul 10

SELECT d.department_id, d.department_name, e.salary
FROM departments d
    FULL OUTER JOIN employees e ON d.department_id = e.department_id
WHERE e.salary = (SELECT MAX(salary) FROM employees WHERE department_id = e.department_id)
    AND e.salary > 3000;

Exercitiul 11

SELECT MIN(AVG(salary))
FROM employees
GROUP BY job_id;

Exercitiul 12

SELECT d.department_id, d.department_name, SUM(e.salary)
FROM departments d
    LEFT OUTER JOIN employees e ON e.department_id = d.department_id
GROUP BY (d.department_id, d.department_name);

Exercitiul 13 

SELECT ROUND(MAX(AVG(salary)),2)
FROM employees
GROUP BY department_id;

Exercitiul 14 

SELECT AVG(e.salary), j.job_id, j.job_title
FROM employees e
    JOIN jobs j ON e.job_id = j.job_id
GROUP BY j.job_id,j.job_title
HAVING AVG(e.salary) = (SELECT MIN(AVG(salary)) FROM employees GROUP BY job_id);

Exercitiul 15

SELECT ROUND(SUM(salary)/COUNT(salary),2)
FROM employees
HAVING (SUM(salary)/COUNT(salary) > 2500);

Exercitiul 16

SELECT department_id,job_id,SUM(salary)
FROM employees
GROUP BY department_id,job_id
ORDER BY department_id,job_id;

Exercitiul 17

SELECT ROUND(AVG(salary),2), d.department_name, MIN(e.salary)
FROM employees e
    JOIN departments d ON e.department_id = d.department_id
GROUP BY e.department_id, d.department_name
HAVING ROUND(AVG(salary),2) = 
    (SELECT ROUND(MAX(AVG(salary)),2) FROM employees GROUP BY department_id);

Exercitiul 18

a)
SELECT d.department_id, d.department_name, COUNT(e.employee_id)
FROM departments d
    LEFT OUTER JOIN employees e ON e.department_id = d.department_id
GROUP BY d.department_id, d.department_name
HAVING COUNT(e.employee_id) < 4;

b)
SELECT d.department_id, d.department_name, COUNT(e.employee_id)
FROM departments d
    LEFT OUTER JOIN employees e ON e.department_id = d.department_id
GROUP BY d.department_id, d.department_name
HAVING COUNT(e.employee_id) = 
    (SELECT MAX(COUNT(employee_id)) FROM employees GROUP BY department_id);

Exercitiul 19

SELECT last_name
FROM employees
WHERE hire_date = (
    SELECT hire_date
    FROM employees
    GROUP BY hire_date
    HAVING COUNT(1) = (
        SELECT MAX(COUNT(1))
        FROM employees
        GROUP BY hire_date
    )
);

Exercitiul 20

SELECT COUNT(department_id) 
FROM (SELECT department_id
                FROM employees
                GROUP BY department_id
                HAVING COUNT(employee_id) > 15);

Exercitiul 21

SELECT d.department_id, SUM(e.salary)
FROM departments d
    JOIN employees e ON d.department_id = e.department_id
GROUP BY d.department_id
HAVING d.department_id != 30 AND COUNT(e.employee_id) > 10;

Exercitiul 22

SELECT e.department_id,d.department_name, COUNT(e.employee_id), AVG(e.salary), em.last_name, em.salary, em.job_id
FROM employees e
    JOIN employees em ON e.department_id = em.department_id
    FULL OUTER JOIN departments d ON e.department_id = d.department_id
GROUP BY e.department_id, em.last_name, em.salary, em.job_id, d.department_name
ORDER BY e.department_id;

Exercitiul 23 

SELECT d.department_id, d.department_name "departament",l.city "oras", e.job_id "job", SUM (e.salary) "salariu total"
FROM departments d
    JOIN employees e ON e.department_id = d.department_id
    JOIN locations l ON d.location_id = l.location_id
GROUP BY d.department_id,d.department_name, e.job_id, l.city
HAVING d.department_id > 80
ORDER BY d.department_id;

Exercitiul 24

SELECT e.last_name, e.employee_id
FROM employees e
    JOIN job_history j ON e.employee_id = j.employee_id
HAVING COUNT(j.employee_id) >= 2
GROUP BY e.last_name, e.employee_id;

Exercitiul 25

SELECT SUM(commission_pct)/COUNT(employee_id)
FROM employees;

Exercitiul 26 ---

Exercitiul 27

SELECT e.job_id "Job", 
    (SELECT SUM(salary) FROM employees WHERE department_id = 30 AND job_id = e.job_id) "Dep30",
    (SELECT SUM(salary) FROM employees WHERE department_id = 50 AND job_id = e.job_id) "Dep50",
    (SELECT SUM(salary) FROM employees WHERE department_id = 80 AND job_id = e.job_id) "Dep80",
    SUM(salary) "Total"
FROM employees e
GROUP BY job_id;

Exercitiul 28

SELECT
    (SELECT COUNT(employee_id) FROM employees) "Nr angajati",
    (SELECT COUNT(employee_id) FROM employees WHERE TO_CHAR(hire_date,'YYYY') = 1997) "Angajati in 1997",
    (SELECT COUNT(employee_id) FROM employees WHERE TO_CHAR(hire_date,'YYYY') = 1998) "Angajati in 1998",
    (SELECT COUNT(employee_id) FROM employees WHERE TO_CHAR(hire_date,'YYYY') = 1999) "Angajati in 1999",
    (SELECT COUNT(employee_id) FROM employees WHERE TO_CHAR(hire_date,'YYYY') = 2000) "Angajati in 2000"
FROM dual;

Exercitiul 29

SELECT d.department_id "Cod", d.department_name "Nume", e.last_name,e.salary,e.job_id,
    (SELECT AVG(salary) FROM employees WHERE department_id = d.department_id) "Salariu mediu"
FROM departments d
    LEFT OUTER JOIN employees e ON e.department_id = d.department_id;

Exercitiul 30

SELECT d.department_id, d.department_name, a.summ
FROM(
    SELECT department_id, SUM(salary) AS summ
    FROM employees
    GROUP BY department_id
) a
JOIN departments d ON d.department_id = a.department_id;

Exercitiul 31

SELECT e.last_name, e.salary, e.department_id, a.avgg
FROM (
    SELECT department_id, AVG(salary) AS avgg
    FROM employees
    GROUP BY department_id
)a
JOIN employees e ON e.department_id = a.department_id
ORDER BY e.department_id;

Exercitiul 32

SELECT e.last_name, e.salary, e.department_id, a.avgg, a.countt
FROM (
    SELECT department_id, AVG(salary) AS avgg, COUNT(employee_id) AS countt 
    FROM employees
    GROUP BY department_id
)a
JOIN employees e ON e.department_id = a.department_id
ORDER BY e.department_id;

Exercitiul 33

SELECT d.department_name, e.sal, e.name
FROM (
    SELECT aux.department_id, aux.last_name AS name, aux.salary AS sal
    FROM employees aux
    WHERE aux.salary = (
        SELECT MIN(salary) 
        FROM employees 
        GROUP BY department_id 
        HAVING department_id = aux.department_id
        )    
) e
JOIN departments d ON d.department_id = e.department_id
ORDER BY d.department_name;

Exercitiul 34

SELECT d.department_id, d.department_name, a.nr_ang, a.sal_med, e.last_name, e.salary
FROM (
    SELECT COUNT(employee_id) AS nr_ang, AVG(salary) AS sal_med, department_id
    FROM employees
    GROUP BY department_id
) a
RIGHT OUTER JOIN departments d ON d.department_id = a.department_id
LEFT OUTER JOIN employees e ON d.department_id = e.department_id
ORDER BY d.department_id;

















    
