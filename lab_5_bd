Exercitiul 1

a)
SELECT d.department_name, j.job_title, AVG(e.salary)
FROM departments d
    JOIN employees e ON d.department_id = e.department_id
    JOIN jobs j ON e.job_id = j.job_id
GROUP BY ROLLUP(d.department_name, j.job_title);

b)
SELECT d.department_name, j.job_title, GROUPING(d.department_name), GROUPING(j.job_title),AVG(e.salary)
FROM departments d
    JOIN employees e ON d.department_id = e.department_id
    JOIN jobs j ON e.job_id = j.job_id
GROUP BY ROLLUP(d.department_name, j.job_title);

Exercitiul 2

a)
SELECT d.department_name, j.job_title, AVG(e.salary)
FROM departments d
    JOIN employees e ON d.department_id = e.department_id
    JOIN jobs j ON e.job_id = j.job_id
GROUP BY CUBE(d.department_name, j.job_title);

b)
SELECT d.department_name, j.job_title, 
    DECODE(GROUPING(d.department_name),0,'Dep','Nu'),
    DECODE(GROUPING(j.job_title),0,'Job','Nu'),
    AVG(e.salary)
FROM departments d
    JOIN employees e ON d.department_id = e.department_id
    JOIN jobs j ON e.job_id = j.job_id
GROUP BY CUBE(d.department_name, j.job_title);

Exercitiul 3

SELECT d.department_name, e.job_id, e.manager_id, MAX(e.salary), SUM(e.salary)
FROM departments d
    JOIN employees e ON d.department_id = e.department_id
    JOIN jobs j ON e.job_id = j.job_id
GROUP BY ROLLUP(d.department_name, e.job_id,e.manager_id);

Exercitiul 4

SELECT MAX(salary)
FROM employees
HAVING MAX(salary)>15000;

Exercitiul 5

a)
SELECT e.first_name, e.last_name, e.salary
FROM employees e
WHERE e.salary > 
    (SELECT AVG(ee.salary) 
    FROM employees ee
    GROUP BY ee.department_id
    HAVING e.department_id = ee.department_id
    );
    
b)
SELECT e.last_name, e.salary, d.department_name, deps.avg_salary, deps.employee_count
FROM employees e
    JOIN (
        SELECT department_id, AVG(salary) AS avg_salary,COUNT(1) AS employee_count
        FROM employees
        GROUP BY department_id ) deps
    ON e.department_id = deps.department_id
    INNER JOIN departments d
    ON e.department_id = d.department_id
WHERE salary >= (
    SELECT AVG(salary)
    FROM employees
    WHERE department_id = e.department_id
);

SAU

SELECT e.last_name, e.salary,
    d.department_name,
    (
        SELECT AVG(salary)
        FROM employees
        WHERE department_id = e.department_id
    ) AS avg_salary,
    (
        SELECT COUNT(1)
        FROM employees
        WHERE department_id = e.department_id
    ) AS num_employees
FROM employees e
INNER JOIN departments d
ON e.department_id = d.department_id
WHERE salary >= (
    SELECT AVG(salary)
    FROM employees
    WHERE department_id = e.department_id
);

Exercitiul 6

SELECT last_name, salary
FROM employees
WHERE salary >= ALL(
    SELECT AVG(salary)
    FROM employees
    GROUP BY department_id
);

SAU

SELECT last_name, salary
FROM employees
WHERE salary >= (
    SELECT MAX(AVG(salary))
    FROM employees
    GROUP BY department_id
);

Exercitiul 7

SELECT department_id, last_name, salary
FROM employees e
WHERE salary = (
    SELECT MIN(salary)
    FROM employees
    WHERE department_id = e.department_id
);

SAU

SELECT d.department_id, e.last_name, e.salary
FROM (
    SELECT department_id, MIN(salary) AS min_salary
    FROM employees
    GROUP BY department_id
) d
INNER JOIN employees e
ON e.department_id = d.department_id AND
    e.salary = d.min_salary;

Exercitiul 8

SELECT d.department_name, e.last_name
FROM employees e
    JOIN departments d ON e.department_id = d.department_id
WHERE e.hire_date IN
    (SELECT MIN(hire_date)
    FROM employees
    GROUP BY department_id)
ORDER BY d.department_name;

Exercitiul 9

SELECT e.last_name
FROM employees e
WHERE EXISTS
(SELECT ee.employee_id
FROM employees ee
WHERE ee.department_id = e.department_id AND ee.salary = 
    (SELECT MAX(salary)
    FROM employees
    GROUP BY department_id
    HAVING department_id = 30)
);

Exercitiul 10

SELECT salary, last_name
FROM employees
WHERE salary IN (
    SELECT salary
    FROM (
        SELECT salary
        FROM employees
        ORDER BY salary DESC
    ) WHERE rownum <= 3
)
ORDER BY salary;

Exercitiul 11

SELECT e.employee_id, e.last_name, e.first_name
FROM employees e
WHERE 2 <= (
    SELECT COUNT(1)
    FROM employees
    WHERE manager_id = e.employee_id
); 

Exercitiul 12

SELECT l.city
FROM locations l
WHERE EXISTS
(SELECT d.department_id
FROM departments d
WHERE d.location_id = l.location_id);

SAU

SELECT l.city
FROM locations l
WHERE l.location_id IN 
(SELECT d.location_id
FROM departments d);

Exercitiul 13

SELECT dd.department_id
FROM departments dd
WHERE NOT EXISTS
(SELECT e.employee_id 
FROM employees e 
WHERE e.department_id = dd.department_id);

Exercitiul 14

a)
SELECT e1.employee_id, e1.first_name||' '||e1.last_name, e1.hire_date,
    e1.salary, e1.manager_id, e2.last_name, LEVEL
FROM employees e1
    JOIN employees e2 ON e1.manager_id = e2.employee_id 
WHERE e1.last_name != 'De Haan'
START WITH e1.last_name = 'De Haan'
CONNECT BY PRIOR e1.employee_id = e1.manager_id AND LEVEL < 3;

b)
SELECT e1.employee_id, e1.first_name||' '||e1.last_name, e1.hire_date,
    e1.salary, e1.manager_id, e2.last_name, LEVEL
FROM employees e1
    JOIN employees e2 ON e1.manager_id = e2.employee_id 
WHERE e1.last_name != 'De Haan'
START WITH e1.last_name = 'De Haan'
CONNECT BY PRIOR e1.employee_id = e1.manager_id;

Exercitiul 15

SELECT manager_id, employee_id, LEVEL
FROM employees
START WITH employee_id = 114
CONNECT BY PRIOR employee_id = manager_id;

Exercitiul 16

SELECT employee_id, first_name||' '||last_name, manager_id, LEVEL
FROM employees
WHERE LEVEL = 3
START WITH last_name = 'De Haan'
CONNECT BY PRIOR employee_id = manager_id;

Exercitiul 17

SELECT employee_id, last_name, manager_id, LEVEL
FROM employees
START WITH manager_id IS null
CONNECT BY PRIOR employee_id = manager_id
ORDER BY LEVEL, manager_id, employee_id;

Exercitiul 18

SELECT employee_id, last_name, salary, manager_id, LEVEL
FROM employees
WHERE salary > 5000
START WITH salary = (SELECT MAX(salary) FROM employees)
CONNECT BY PRIOR employee_id = manager_id
ORDER BY LEVEL, manager_id, employee_id;

Exercitiul 19

WITH emp AS (SELECT department_id,SUM(salary) AS sall FROM employees GROUP BY department_id),
    dep AS (SELECT department_name, department_id FROM departments),
    sal AS (SELECT AVG(salary) AS av FROM employees)
SELECT dep.department_name, emp.sall 
FROM emp, dep, sal
WHERE emp.department_id = dep.department_id AND sal.av < emp.sall; 

Exercitiul 20

WITH hire AS (SELECT MIN(hire_date) AS h FROM employees WHERE manager_id = 
    (SELECT employee_id FROM employees WHERE first_name||' '||last_name = 'Steven King')) 
SELECT employee_id, first_name||' '||last_name, job_id, hire_date, manager_id
FROM employees, hire
WHERE TO_CHAR(hire_date,'YYYY') != '1970'
START WITH hire_date = hire.h
CONNECT BY PRIOR employee_id = manager_id;

Exercitiul 21

SELECT * 
FROM 
    (SELECT last_name, salary
    FROM employees
    ORDER BY salary DESC)
WHERE ROWNUM <=10;

Exercitiul 22

SELECT job_id 
FROM 
    (SELECT job_id, AVG(salary) AS sal
    FROM employees
    GROUP BY job_id
    ORDER BY sal)
WHERE ROWNUM <=3;

Exercitiul 23

SELECT DISTINCT 'Departmentul '||d.department_name||' este condus de ' "1", 
    NVL(TO_CHAR(e.manager_id), 'nimeni') "2",
    ' si '||DECODE(COUNT(e.employee_id),0,'nu are salariati',1,'are '||COUNT(e.employee_id)||' salariat','are '||COUNT(e.employee_id)||' salariati') "3"
FROM departments d
    LEFT OUTER JOIN employees e ON e.department_id = d.department_id
GROUP BY d.department_name, e.manager_id;

Exercitiul 24

SELECT first_name, last_name, NULLIF(LENGTH(last_name), LENGTH(first_name))
FROM employees;

Exercitiul 25

SELECT last_name, hire_date, salary, 
    DECODE(TO_CHAR(hire_date,'YYYY'),
    '1989', salary * 1.2,
    '1990', salary * 1.15,
    '1991', salary * 1.1,
    salary) "NEW SALARY"
FROM employees
ORDER BY hire_date;

Exercitiul 26

SELECT
    job_id,
    CASE
        WHEN job_id LIKE 'S%' THEN SUM(salary)
        WHEN MAX(salary) = (SELECT MAX(salary) FROM employees) THEN AVG(salary)
        ELSE MIN(salary)
    END "info"
FROM employees
GROUP BY job_id;




























